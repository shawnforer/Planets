function [steps_taken] = my_a_star_structs(map);
count = 1;
%gives location of the player and scrap
player_start_row = map.player.location(2,1);
player_start_col = map.player.location(2,2);
scrap_row = map.scraps.location(1,1);
scrap_column = map.scraps.location(1,2);

%m = rows, n = columns of map
m = size(map.grid,1);
n = size(map.grid,2);

%create a basis array numbering all of the nodes 1 through # of tiles in
%the whole map
%use this basis array to distribute nodes into open, null, closed lists
basis_array = zeros(m,n);
for j = 1:n
    for i= 1: m
        basis_array(i,j) = count;
        count = count +1;
    end
end

null_list = [(1:m*n)];
closed_list = cell(1,2);
closed_list{1} = (basis_array(player_start_row, player_start_column));
closed_list{2} = [];
open_list = cell(1,2);
g_base = 0;

%h cost (heuristic) = distance of current node from end node
h = abs(player_start_row - scrap_row) + abs(player_start_col - scrap_col);

while location_player ~= location_scrap
    %% location_player = map.player.location(end, :);
    
    %checks spaces adjacent to all closed list values and puts them 
    %in the open list
    
    %checks element above node as neighbor
    if sum(basis_array(closed_list{end,1} - 1)== closed_list{:,1}) ==0
        [neighbor_row,neighbor_col] = ind2sub([m,n],(basis_array(closed_list{end,1} - 1)));
        neighbor_loc = basis_array(closed_list{end,1} - 1);
        parent_loc = basis_array(closed_list{end,1});
        h = abs(scrap_row - neighbor_row) + abs(scrap_col - neighbor_col);
        g = g_base + 1;
        f = h + g;
        open_list{end, 1} = f;
        open_list{end, 2} = [neighbor_loc, parent_loc, g];
        open_list = [open_list; {[], []}];
    end
      %checks element below node as nighbor   
       if sum(basis_array(closed_list{end,1} + 1) == closed_list{:,1}) ==0
        [neighbor_row,neighbor_col] = ind2sub([m,n],(basis_array(closed_list{end,1} + 1)));
        neighbor_loc = basis_array(closed_list{end,1} + 1);
        parent_loc = basis_array(closed_list{end,1});
        h = abs(scrap_row - neighbor_row)+abs(scrap_col - neighbor_col);
        g = g_base + 1;
        f = h + g;
        open_list{end, 1} = f;
        open_list{end, 2} = [neighbor_loc, parent_loc, g];
        open_list = [open_list; {[], []}];
    end
        %checks element to the right of node as nighbor   
        if sum(basis_array(closed_list{end,1} + m)== closed_list{:,1}) ==0
        [neighbor_row,neighbor_col] = ind2sub([m,n],(basis_array(closed_list{end,1} + m)));
        neighbor_loc = basis_array(closed_list{end,1} + m);
        parent_loc = basis_array(closed_list{end,1});
        h = abs(scrap_row - neighbor_row)+abs(scrap_col - neighbor_col);
        g = g_base + 1;
        f = h + g;
        open_list{end, 1} = f;
        open_list{end, 2} = [neighbor_loc, parent_loc, g];
        open_list = [open_list; {[], []}];
    end
         %checks element to the left of node as nighbor   
       if sum(basis_array(closed_list{end,1} - m)== closed_list{:,1}) ==0
        [neighbor_row,neighbor_col] = ind2sub([m,n],(basis_array(closed_list{end,1} - m)));
        neighbor_loc = basis_array(closed_list{end,1} - m);
        parent_loc = basis_array(closed_list{end,1});
        h = abs(scrap_row - neighbor_row)+abs(scrap_col - neighbor_col);
        g = g_base + 1;
        f = h + g;
        open_list{end, 1} = f;
        open_list{end, 2} = [neighbor_loc, parent_loc, g];
        open_list = [open_list; {[], []}];
    end
          
         
       % find smallest f 
        open_list{1,1} = min;
        index = 0;
         for i = 2: size(open_list,1)
             if open_list{i,1} < min
                 min = open_list{i,1};
                 index = i;
             end
         end
         
         %update closed list with new node
         closed_list = [closed_list; {[],[]}];
         closed_list{end,1} = min;
         parent = open_list{index,2}(2);
         closed_list{end,2} = parent;
         
         %% update current location and its values
         [current_row,current_col] = ind2sub([m,n],min);
         location_player = [current_row,current_col];
         g_base = open_list{index, 2}(3);
         
         %delete node from open list
         if index == 1
             open_list = [open_list((2:end),:)];
         elseif index == size(open_list,1)
             open_list = [open_list((1:end-1),:)];
         else
             open_list = [open_list((1:index-1),:); open_list((index+1:end),:)];
         end
         
end
steps_taken = [];
steps_taken(1) = location_player;
current = closed_list{i,2};

while current ~= 0
    steps_taken = [steps_taken ; current];
    for i = 1: size(closed_list,1)
        if closed_list{i,1} == current
            current = closed_list{i,2};
        end
    end
end
steps_taken = fliplr(steps_taken);
end
